version: "3.9"
services:
    aircraft_mgmt_postgres:
        container_name: aircraft_mgmt_postgres
        image: postgres:13@sha256:a63b1bd5dff73a9c1851a0f97e4c593a6b6e2cde6671811b1fa9d10d7e86b658
        restart: always
        environment:
            DB_HOST: aircraft_mgmt_postgres
            POSTGRES_DB: aircraft_mgmt
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
        ports:
            - 5432:5432
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s
    aircraft_mgmt:
        container_name: aircraft_mgmt
        image: vcdoprodcrdevops.azurecr.io/aircraft-mgmt-api:latest
        pull_policy: always
        ports:
            - 9080:9080
        depends_on:
            aircraft_mgmt_postgres:
                condition: service_healthy
        environment:
            - SPRING_PROFILES_ACTIVE=local
            - DB_HOST=aircraft_mgmt_postgres
        healthcheck:
            test: ["CMD", "wget", "--spider", "http://localhost:9080/v1/aircraft-management/aircraft"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 120s
    network_scheduling_postgres:
        container_name: network_scheduling_postgres
        image: postgres:13@sha256:a63b1bd5dff73a9c1851a0f97e4c593a6b6e2cde6671811b1fa9d10d7e86b658
        restart: always
        environment:
            POSTGRES_DB: networkscheduling
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
        ports:
            - "5442:5442"
        command: -p 5442
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -p 5442"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s
    network_scheduling_mgmt:
        container_name: network_scheduling_mgmt
        image: vcdoprodcrdevops.azurecr.io/network-scheduling-mgmt-api:latest
        depends_on:
            network_scheduling_postgres:
                condition: service_healthy
        ports:
            - 9081:9081
        restart: always
        environment:
            - SPRING_PROFILES_ACTIVE=local
            - DB_HOST=network_scheduling_postgres
        healthcheck:
            test: ["CMD", "wget", "--spider", "http://localhost:9081/v1/network-scheduling-management/events"]
            interval: 10s
            timeout: 5s
            retries: 15
            start_period: 10s
    commercial_scheduling_postgres:
        container_name: commercial_scheduling_postgres
        image: postgres:13@sha256:a63b1bd5dff73a9c1851a0f97e4c593a6b6e2cde6671811b1fa9d10d7e86b658
        restart: always
        environment:
            POSTGRES_DB: commercial_scheduling
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s
    commercial_scheduling:
        container_name: commercial_scheduling
        image: vcdoprodcrdevops.azurecr.io/commercial-scheduling-api:latest
        depends_on:
            commercial_scheduling_postgres:
                condition: service_healthy
        ports:
            - "9080:8080"
        restart: always
        environment:
            - SPRING_PROFILES_ACTIVE=localDocker
            - DB_HOST=commercial_scheduling_postgres
    reverse_proxy:
        container_name: reverse_proxy
        image: reverse-proxy:latest
        build:
            context: ./packages/apps/voloiq/build/reverse-proxy/
            dockerfile: ./Dockerfile
        depends_on:
            aircraft_mgmt:
                condition: service_healthy
            network_scheduling_mgmt:
                condition: service_healthy
        ports:
            - "9082:9082"
        environment:
            - AIRCRAFT_MANAGEMENT_URL=aircraft_mgmt
            - AIRCRAFT_MANAGEMENT_PORT=9080
            - NETWORK_SCHEDULING_MANAGEMENT_URL=network_scheduling_mgmt
            - NETWORK_SCHEDULING_MANAGEMENT_PORT=9081
        restart: always
    app:
        container_name: voloiq_ui
        build:
            context: .
            dockerfile: ./packages/apps/voloiq/build/Dockerfile.app
        environment:
            - BACKEND_BASE_URL=http://localhost:9082
            - FEEDBACK_URL=https://jira.volocopter.org/plugins/servlet/desk/portal/8
        ports:
            - 8080:8080
