import { Matchers } from "@pact-foundation/pact";
import { pactWith } from "jest-pact";
import type { PropsWithChildren } from "react";
import { LocalAuthenticationProvider } from "@voloiq/auth";
import { I18nProvider } from "@voloiq/i18n";
import { ServiceProvider } from "@voloiq/service";
import { act, renderHook } from "@voloiq/testing";
import { CONSUMER_VOLOIQ_UI, PROVIDER_COMMERCIAL_SCHEDULING_API } from "../../../pactConstants";
import { PLAN_CUSTOMIZATION_BASE_URL } from "../../../serviceEndpoints";
import { anyPlanSummary } from "../anyPlanSummary";
import { useApprovePlanSummary } from "../useApprovePlanSummary";

const { like } = Matchers;

const commercialPlanId = "00000000-0000-0000-0000-000000000001";
const commercialSchedule = {
    commercialPlanId,
    commercialScheduleItemCustomizations: [
        anyPlanSummary({
            id: "00000000-0000-0000-0000-000000000004",
            commercialScheduleItemId: "00000000-0000-0000-0000-000000000005",
            commercialPlanId,
            customCommercialScheduleItemId: "00000000-0000-0000-0000-000000000003",
            customPrice: 100,
            customOfferRunwayValue: 10,
            customOfferRunwayUnit: "HOURS",
            isNoCustomOffer: true,
            customComments: "Some Comments",
            isCustomScheduleItemDeletionReq: false,
        }),
    ],
};

pactWith({ consumer: CONSUMER_VOLOIQ_UI, provider: PROVIDER_COMMERCIAL_SCHEDULING_API }, (provider) => {
    test("will approve request for a customized plan summary item of a commercial plan", async () => {
        await provider.addInteraction({
            state: `approve customization items in AWAITING_APPROVAL`,
            uponReceiving: "plan exists and is in DRAFT and customization items are in AWAITING_APPROVAL",
            withRequest: {
                path: `${PLAN_CUSTOMIZATION_BASE_URL}/approve`,
                method: "PUT",
                body: like(commercialSchedule),
            },
            willRespondWith: {
                status: 200,
                body: {
                    data: [
                        {
                            // this is generated by the server so we use Matchers.uuid because we don't know what it will be
                            id: Matchers.uuid("00000000-0000-0000-0000-000000000002"),
                            commercialScheduleItemId: "00000000-0000-0000-0000-000000000004",
                            status: "APPROVED",
                            customPrice: 100,
                            customOfferRunwayValue: 10,
                            customOfferRunwayUnit: "HOURS",
                            isDeleted: false,
                            isNoCustomOffer: true,
                            customComments: "Some Comments",
                            isOverwritten: false,
                            isScheduleItemDeletionRequest: false,
                        },
                    ],
                    error: null,
                    meta: null,
                    pagination: null,
                },
            },
        });

        const { result, waitForNextUpdate } = renderHook(() => useApprovePlanSummary(), {
            wrapper: (props: PropsWithChildren<{}>) => {
                const { children } = props;
                return (
                    <I18nProvider>
                        <LocalAuthenticationProvider>
                            <ServiceProvider baseUrl={provider.mockService.baseUrl}>{children}</ServiceProvider>
                        </LocalAuthenticationProvider>
                    </I18nProvider>
                );
            },
        });

        act(() => {
            result.current.sendRequest({
                data: commercialSchedule,
            });
        });

        await waitForNextUpdate();
    });
});
